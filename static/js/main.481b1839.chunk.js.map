{"version":3,"sources":["AddItemForm.tsx","EditablesSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","preparedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodoListTitle","id","removeTodoList","Delete","addTask","tasks","map","task","className","isDone","key","Checkbox","changeStatus","checked","changeTitle","removeTask","Button","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","tasksObj","setTasks","todoListId","todoList","filteredTodoList","find","tl","taskId","todolistId","t","console","log","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoList","spacing","tasksForToDoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mTAOO,SAASA,EAAaC,GAA+B,IAAD,EAE/BC,mBAAU,IAFqB,mBAEnDC,EAFmD,KAE5CC,EAF4C,OAG/BF,mBAAyB,MAHM,mBAGnDG,EAHmD,KAG5CC,EAH4C,KAKnDC,EAAU,WACd,IAAIC,EAAgBL,EAAMM,OAErBD,EACHP,EAAMM,QAASC,GAGfF,EAAU,sBAEZF,EAAU,KAWZ,OAAS,6BACP,kBAACM,EAAA,EAAD,CACEC,QAAU,WACVC,MAAQT,EACRU,SAboB,SAAEC,GACxBR,EAAU,MACVF,EAAUU,EAAEC,cAAcH,QAYxBI,WAVsB,SAAEF,GACN,KAAfA,EAAEG,UACLV,KASAF,QAAUA,EACVa,MAAQ,QACRC,WAAad,IAGf,kBAACe,EAAA,EAAD,CAAYC,MAAQ,UAAYC,QAAUf,GACxC,kBAACgB,EAAA,EAAD,QCnCN,IAkCeC,EAlCM,SAAEvB,GAA8B,IAAD,EAChBC,oBAAmB,GADH,mBAC1CuB,EAD0C,KAChCC,EADgC,OAEtBxB,mBAAkBD,EAAMW,OAFF,mBAE1CT,EAF0C,KAEnCC,EAFmC,KAoBlD,OACEqB,EAEE,kBAAEf,EAAA,EAAF,CACEC,QAAU,WACVC,MAAQT,EACRwB,WAAY,EACZC,OAjBqB,WACzBF,GAAa,GACbzB,EAAMY,SAAUV,IAgBZU,SAbkB,SAAEC,GAExBV,EAAUU,EAAEC,cAAcH,UAatB,0BAAMiB,cA1Ba,WACvBH,GAAa,GAEbtB,EAAUH,EAAMW,SAuB+BX,EAAMW,Q,2BCsE1CkB,EAjFE,SAAE7B,GAkBjB,OACE,6BAEE,4BACE,kBAAC,EAAD,CAAcW,MAAQX,EAAME,MAAQU,SARZ,SAAEV,GAC9BF,EAAM8B,oBAAqB9B,EAAM+B,GAAI7B,MAQjC,kBAACiB,EAAA,EAAD,CAAYE,QAjBlB,WACErB,EAAMgC,eAAgBhC,EAAM+B,MAiBtB,kBAACE,EAAA,EAAD,QAIJ,kBAAClC,EAAD,CAAaO,QAlBD,SAAEJ,GAChBF,EAAMkC,QAAShC,EAAOF,EAAM+B,OAmB1B,6BAEI/B,EAAMmC,MAAMC,KAAK,SAAEC,GAUjB,OAAO,yBACLC,WAA4B,IAAhBD,EAAKE,OAAkB,UAAY,GAC/CC,IAAMH,EAAKN,IAEX,kBAACU,EAAA,EAAD,CACE7B,SAZoB,SAAEC,GACxBb,EAAM0C,aAAcL,EAAKN,GAAIlB,EAAEC,cAAc6B,QAAS3C,EAAM+B,KAY1DX,MAAQ,UACRuB,QAAUN,EAAKE,SAEjB,kBAAC,EAAD,CAAc5B,MAAQ0B,EAAKnC,MAAQU,SAbX,SAAEV,GAC1BF,EAAM4C,YAAaP,EAAKN,GAAI7B,EAAOF,EAAM+B,OAezC,kBAACZ,EAAA,EAAD,CAAYE,QApBS,kBAAMrB,EAAM6C,WAAYR,EAAKN,GAAI/B,EAAM+B,MAqB1D,kBAACE,EAAA,EAAD,YAMV,6BACE,kBAACa,EAAA,EAAD,CACEpC,QAA2B,QAAjBV,EAAM+C,OAAmB,WAAa,OAChD1B,QA9DkB,WAAQrB,EAAMgD,aAAc,MAAOhD,EAAM+B,KA+D3DX,MAAQ,WAHV,OAKA,kBAAC0B,EAAA,EAAD,CACEpC,QAA2B,WAAjBV,EAAM+C,OAAsB,WAAa,OACnD1B,QAlEqB,WAAQrB,EAAMgD,aAAc,SAAUhD,EAAM+B,KAmEjEX,MAAQ,WAHV,UAKA,kBAAC0B,EAAA,EAAD,CACEpC,QAA2B,cAAjBV,EAAM+C,OAAyB,WAAa,OACtD1B,QAtEwB,WAAQrB,EAAMgD,aAAc,YAAahD,EAAM+B,KAuEvEX,MAAQ,aAHV,gB,uECoEO6B,MAnJf,WAAgB,IAAD,EACTC,EAAcC,cACdC,EAAcD,cAFL,EAIqBlD,mBAA+B,CAC/D,CAAE8B,GAAImB,EAAahD,MAAO,gBAAiB6C,OAAQ,OACnD,CAAEhB,GAAIqB,EAAalD,MAAO,cAAe6C,OAAQ,eANtC,mBAIPM,EAJO,KAIIC,EAJJ,OASgBrD,oBAAQ,mBACjCiD,EAAe,CACf,CAAEnB,GAAIoB,cAAMjD,MAAO,MAAOqC,QAAQ,GAClC,CAAER,GAAIoB,cAAMjD,MAAO,KAAMqC,QAAQ,GACjC,CAAER,GAAIoB,cAAMjD,MAAO,UAAWqC,QAAQ,GACtC,CAAER,GAAIoB,cAAMjD,MAAO,WAAYqC,QAAQ,GACvC,CAAER,GAAIoB,cAAMjD,MAAO,UAAWqC,QAAQ,KANL,cAQjCa,EAAe,CACf,CAAErB,GAAIoB,cAAMjD,MAAO,OAAQqC,QAAQ,GACnC,CAAER,GAAIoB,cAAMjD,MAAO,MAAOqC,QAAQ,GAClC,CAAER,GAAIoB,cAAMjD,MAAO,WAAYqC,QAAQ,KAXN,IATxB,mBASPgB,EATO,KASGC,EATH,KAwBb,SAASX,EAAYd,EAAY0B,GAC/B,IAAIC,EAAWH,EAAUE,GACzBF,EAAUE,GAAeC,EAASX,QAAQ,SAAAV,GAAI,OAAIA,EAAKN,KAAOA,KAC9DyB,EAAS,eAAMD,IAGjB,SAASvB,EAAgByB,GACvB,IAAIE,EACJA,EAAmBN,EAAUN,QAAQ,SAAAW,GAAQ,OAAIA,EAAS3B,KAAO0B,KACjEH,EAAcK,UACPJ,EAAUE,GACjBD,EAAS,eAAMD,IAGjB,SAASzB,EAAqBC,EAAY7B,GACxC,IAAMwD,EAAWL,EAAUO,MAAM,SAAAC,GAAE,OAAIA,EAAG9B,KAAOA,KAC5C2B,IACHA,EAASxD,MAAQA,EACjBoD,EAAa,YAAMD,KAIvB,SAASnB,EAAShC,EAAeuD,GAC/B,IAAIpB,EAAO,CAAEN,GAAIoB,cAAMjD,MAAOA,EAAOqC,QAAQ,GACzCmB,EAAWH,EAAUE,GACzBF,EAAUE,GAAV,CAA2BpB,GAA3B,mBAAoCqB,IACpCF,EAAS,eAAMD,IAGjB,SAASb,EAAcX,EAAYQ,EAAiBkB,GAClD,IACIpB,EADYkB,EAAUE,GACLG,MAAM,SAAAvB,GAAI,OAAIA,EAAKN,KAAOA,KAC1CM,IACHA,EAAKE,OAASA,EACdiB,EAAS,eAAMD,KAInB,SAASX,EAAakB,EAAgB5D,EAAe6D,GACnD,IAAI1B,EAAOkB,EAAUQ,GAAaH,MAAM,SAAAI,GAAC,OAAIA,EAAEjC,KAAO+B,KACjDzB,IACHA,EAAKnC,MAAQA,EACbsD,EAAS,eAAMD,KAOnB,SAASP,EAAcrC,EAAyB8C,GAC9C,IAAIpB,EAAOgB,EAAUO,MAAM,SAAEC,GAAF,OAAUA,EAAG9B,KAAO0B,KAC1CpB,IACHA,EAAKU,OAASpC,GAEhB2C,EAAa,YAAMD,IAYrB,OAnBAY,QAAQC,IAAKX,GAoBX,yBAAKjB,UAAU,OAEb,kBAAC6B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAClD,EAAA,EAAD,CAAYmD,KAAK,QAAQlD,MAAM,UAAUmD,aAAW,QAClD,kBAACC,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CAAY/D,QAAQ,MAApB,QAGA,kBAACoC,EAAA,EAAD,CAAQ1B,MAAM,WAAd,WAIJ,kBAACsD,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAQ,CAAEC,QAAS,SACjC,kBAAChF,EAAD,CAAaO,QA1BrB,SAAsBJ,GACpB,IAAI8E,EAA4B,CAAEjD,GAAIoB,cAAMjD,MAAOA,EAAO6C,OAAQ,OAClEO,EAAa,CAAG0B,GAAJ,mBAAoB3B,KAChCG,EAAS,eACJD,EADG,eAEJyB,EAAYjD,GAAM,UAuBlB,kBAAC6C,EAAA,EAAD,CAAMC,WAAS,EAACI,QAAU,GACtB5B,EAAUjB,KAAK,SAAAyB,GACf,IAAIqB,EAAmB3B,EAAUM,EAAG9B,IASpC,MAPmB,WAAd8B,EAAGd,SACNmC,EAAmBA,EAAiBnC,QAAQ,SAAAV,GAAI,OAAoB,IAAhBA,EAAKE,WAExC,cAAdsB,EAAGd,SACNmC,EAAmBA,EAAiBnC,QAAQ,SAAAV,GAAI,OAAoB,IAAhBA,EAAKE,WAIzD,kBAACqC,EAAA,EAAD,CAAMO,MAAI,GACR,kBAACC,EAAA,EAAD,CAAON,MAAQ,CAAEC,QAAS,SACxB,kBAAC,EAAD,CACEhD,GAAK8B,EAAG9B,GACRS,IAAMqB,EAAG9B,GACT7B,MAAQ2D,EAAG3D,MACXiC,MAAQ+C,EACRrC,WAAaA,EACbE,OAASc,EAAGd,OACZC,aAAeA,EACfd,QAAUA,EACVQ,aAAeA,EACfV,eAAiBA,EACjBqB,UAAYA,EACZT,YAAcA,EACdd,oBAAsBA,aCjJtBuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhG,GACL6D,QAAQ7D,MAAMA,EAAMiG,c","file":"static/js/main.481b1839.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport { Button, TextField, IconButton } from '@material-ui/core';\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: ( title: string ) => void;\r\n};\r\nexport function AddItemForm( props: AddItemFormPropsType ) {\r\n\r\n  let [ title, setTitle ] = useState( \"\" );\r\n  let [ error, setError ] = useState<string | null>( null );\r\n\r\n  const addItem = () => {\r\n    let preparedTitle = title.trim();\r\n\r\n    if ( preparedTitle ) {\r\n      props.addItem( preparedTitle );\r\n    }\r\n    else {\r\n      setError( 'Title is required!' );\r\n    }\r\n    setTitle( \"\" );\r\n  };\r\n  const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    setError( null );\r\n    setTitle( e.currentTarget.value );\r\n  };\r\n  const onKeyPressHandler = ( e: KeyboardEvent<HTMLInputElement> ) => {\r\n    if ( e.charCode === 13 ) {\r\n      addItem();\r\n    }\r\n  };\r\n  return ( <div>\r\n    <TextField\r\n      variant={ 'outlined' }\r\n      value={ title }\r\n      onChange={ onChangeHandler }\r\n      onKeyPress={ onKeyPressHandler }\r\n      error={ !!error }\r\n      label={ 'Title' }\r\n      helperText={ error }\r\n    />\r\n\r\n    <IconButton color={ 'primary' } onClick={ addItem }>\r\n      <AddBox />\r\n    </IconButton>\r\n\r\n  </div> );\r\n}\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\ntype EditableSpanType = {\r\n  value: string;\r\n  onChange: ( newValue: string ) => void;\r\n};\r\n\r\nconst EditableSpan = ( props: EditableSpanType ) => {\r\n  const [ editMode, setEditMode ] = useState<boolean>( false );\r\n  const [ title, setTitle ] = useState<string>( props.value );\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode( true );\r\n    // set to default value in case if we didn't save it\r\n    setTitle( props.value );\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode( false );\r\n    props.onChange( title );\r\n  };\r\n\r\n  const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    // setError( null );\r\n    setTitle( e.currentTarget.value );\r\n  };\r\n\r\n  return (\r\n    editMode\r\n      ?\r\n      < TextField\r\n        variant={ 'outlined' }\r\n        value={ title }\r\n        autoFocus={ true }\r\n        onBlur={ deactivateEditMode }\r\n        onChange={ onChangeHandler }\r\n      />\r\n      : <span onDoubleClick={ activateEditMode }>{ props.value }</span>\r\n  );\r\n};\r\n\r\nexport default EditableSpan;","import React, { ChangeEvent } from \"react\";\r\nimport { FilterValuesType, todoListType } from './App';\r\nimport { AddItemForm } from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditablesSpan\";\r\nimport { IconButton, Button, TextField, Checkbox } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\n\r\n\r\nexport type TaskType = {\r\n  id: string;\r\n  title: string;\r\n  isDone: boolean;\r\n};\r\ntype PropsType = {\r\n  id: string;\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  filter: string;\r\n  removeTask: ( taskId: string, todoListId: string ) => void;\r\n  changeFilter: ( value: FilterValuesType, todoListId: string ) => void;\r\n  addTask: ( title: string, todoListId: string ) => void;\r\n  changeStatus: ( id: string, isDone: boolean, todoListId: string ) => void;\r\n  todoLists: Array<todoListType>;\r\n  removeTodoList: ( id: string ) => void;\r\n  changeTitle: ( taskId: string, title: string, todolistId: string ) => void;\r\n  changeTodoListTitle: ( id: string, title: string ) => void;\r\n};\r\n\r\nconst Todolist = ( props: PropsType ) => {\r\n\r\n  const onAllClickHandler = () => { props.changeFilter( \"all\", props.id ); };\r\n  const onActiveClickHandler = () => { props.changeFilter( \"active\", props.id ); };\r\n  const onCompletedClickHandler = () => { props.changeFilter( \"completed\", props.id ); };\r\n\r\n  function removeTodoList() {\r\n    props.removeTodoList( props.id );\r\n  }\r\n\r\n  const addTask = ( title: string ) => {\r\n    props.addTask( title, props.id );\r\n  };\r\n\r\n  const onChangeTodoListTitle = ( title: string ) => {\r\n    props.changeTodoListTitle( props.id, title );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h3>\r\n        <EditableSpan value={ props.title } onChange={ onChangeTodoListTitle } />\r\n        <IconButton onClick={ removeTodoList }>\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n\r\n      <AddItemForm addItem={ addTask } />\r\n\r\n      <div>\r\n        {\r\n          props.tasks.map( ( task ) => {\r\n\r\n            const onClickTandler = () => props.removeTask( task.id, props.id );\r\n            const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n              props.changeStatus( task.id, e.currentTarget.checked, props.id );\r\n            };\r\n            const onChangeTaskTitle = ( title: string ) => {\r\n              props.changeTitle( task.id, title, props.id );\r\n            };\r\n\r\n            return <div\r\n              className={ task.isDone === true ? 'is-done' : '' }\r\n              key={ task.id }>\r\n\r\n              <Checkbox\r\n                onChange={ onChangeHandler }\r\n                color={ 'primary' }\r\n                checked={ task.isDone } />\r\n\r\n              <EditableSpan value={ task.title } onChange={ onChangeTaskTitle } />\r\n\r\n              {/* Remove task */ }\r\n              <IconButton onClick={ onClickTandler }>\r\n                <Delete />\r\n              </IconButton>\r\n            </div>;\r\n          } )\r\n        }\r\n      </div>\r\n      <div>\r\n        <Button\r\n          variant={ props.filter === 'all' ? 'outlined' : 'text' }\r\n          onClick={ onAllClickHandler }\r\n          color={ 'default' }>All</Button>\r\n\r\n        <Button\r\n          variant={ props.filter === 'active' ? 'outlined' : 'text' }\r\n          onClick={ onActiveClickHandler }\r\n          color={ 'primary' }>Active</Button>\r\n\r\n        <Button\r\n          variant={ props.filter === 'completed' ? 'outlined' : 'text' }\r\n          onClick={ onCompletedClickHandler }\r\n          color={ 'secondary' }>Completed</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todolist;","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Todolist from \"./Todolist\";\r\nimport { v1 } from \"uuid\";\r\nimport { TaskType } from './Todolist';\r\nimport { AddItemForm } from \"./AddItemForm\";\r\nimport { AppBar, Toolbar, IconButton, Typography, Button, Container, Grid, Paper } from \"@material-ui/core\";\r\nimport { Menu } from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type todoListType = {\r\n  id: string;\r\n  title: string;\r\n  filter: FilterValuesType;\r\n};\r\n\r\ntype TasksStateType = {\r\n  [ key: string ]: Array<TaskType>;\r\n};\r\n\r\nfunction App() {\r\n  let todoListId1 = v1();\r\n  let todoListId2 = v1();\r\n\r\n  let [ todoLists, setTodoLists ] = useState<Array<todoListType>>( [\r\n    { id: todoListId1, title: 'What to learn', filter: 'all' },\r\n    { id: todoListId2, title: 'What to buy', filter: 'completed' }\r\n  ] );\r\n\r\n  let [ tasksObj, setTasks ] = useState<TasksStateType>( {\r\n    [ todoListId1 ]: [\r\n      { id: v1(), title: \"CSS\", isDone: true },\r\n      { id: v1(), title: \"JS\", isDone: true },\r\n      { id: v1(), title: \"ReactJS\", isDone: true },\r\n      { id: v1(), title: \"Rest API\", isDone: false },\r\n      { id: v1(), title: \"graphQL\", isDone: false }\r\n    ],\r\n    [ todoListId2 ]: [\r\n      { id: v1(), title: \"CSS2\", isDone: true },\r\n      { id: v1(), title: \"JS1\", isDone: true },\r\n      { id: v1(), title: \"ReactJS1\", isDone: false }\r\n    ],\r\n  } );\r\n\r\n  function removeTask( id: string, todoListId: string ) {\r\n    let todoList = tasksObj[ todoListId ];\r\n    tasksObj[ todoListId ] = todoList.filter( task => task.id !== id );\r\n    setTasks( { ...tasksObj } );\r\n  };\r\n\r\n  function removeTodoList( todoListId: string ) {\r\n    let filteredTodoList = todoLists;\r\n    filteredTodoList = todoLists.filter( todoList => todoList.id !== todoListId );\r\n    setTodoLists( filteredTodoList );\r\n    delete tasksObj[ todoListId ];\r\n    setTasks( { ...tasksObj } );\r\n  };\r\n\r\n  function changeTodoListTitle( id: string, title: string ) {\r\n    const todoList = todoLists.find( tl => tl.id === id );\r\n    if ( todoList ) {\r\n      todoList.title = title;\r\n      setTodoLists( [ ...todoLists ] );\r\n    }\r\n  }\r\n\r\n  function addTask( title: string, todoListId: string ) {\r\n    let task = { id: v1(), title: title, isDone: false };\r\n    let todoList = tasksObj[ todoListId ];\r\n    tasksObj[ todoListId ] = [ task, ...todoList ];\r\n    setTasks( { ...tasksObj } );\r\n  }\r\n\r\n  function changeStatus( id: string, isDone: boolean, todoListId: string ) {\r\n    let todoTasks = tasksObj[ todoListId ];\r\n    let task = todoTasks.find( task => task.id === id );\r\n    if ( task ) {\r\n      task.isDone = isDone;\r\n      setTasks( { ...tasksObj } );\r\n    }\r\n  }\r\n\r\n  function changeTitle( taskId: string, title: string, todolistId: string ) {\r\n    let task = tasksObj[ todolistId ].find( t => t.id === taskId );\r\n    if ( task ) {\r\n      task.title = title;\r\n      setTasks( { ...tasksObj } );\r\n    }\r\n\r\n  }\r\n\r\n  console.log( tasksObj );\r\n\r\n  function changeFilter( value: FilterValuesType, todoListId: string ) {\r\n    let task = todoLists.find( ( tl ) => tl.id === todoListId );\r\n    if ( task ) {\r\n      task.filter = value;\r\n    }\r\n    setTodoLists( [ ...todoLists ] );\r\n  }\r\n\r\n  function addTodoList( title: string ) {\r\n    let newTodoList: todoListType = { id: v1(), title: title, filter: 'all' };\r\n    setTodoLists( [ newTodoList, ...todoLists ] );\r\n    setTasks( {\r\n      ...tasksObj,\r\n      [ newTodoList.id ]: []\r\n    } );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Header */ }\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* end Header */ }\r\n      <Container fixed>\r\n        <Grid container style={ { padding: '20px' } }>\r\n          <AddItemForm addItem={ addTodoList } />\r\n        </Grid>\r\n        <Grid container spacing={ 3 }>\r\n          { todoLists.map( tl => {\r\n            let tasksForToDoList = tasksObj[ tl.id ];\r\n\r\n            if ( tl.filter === \"active\" ) {\r\n              tasksForToDoList = tasksForToDoList.filter( task => task.isDone === false );\r\n            }\r\n            if ( tl.filter === \"completed\" ) {\r\n              tasksForToDoList = tasksForToDoList.filter( task => task.isDone === true );\r\n            }\r\n\r\n            return (\r\n              <Grid item>\r\n                <Paper style={ { padding: '10px' } }>\r\n                  <Todolist\r\n                    id={ tl.id }\r\n                    key={ tl.id }\r\n                    title={ tl.title }\r\n                    tasks={ tasksForToDoList }\r\n                    removeTask={ removeTask }\r\n                    filter={ tl.filter }\r\n                    changeFilter={ changeFilter }\r\n                    addTask={ addTask }\r\n                    changeStatus={ changeStatus }\r\n                    removeTodoList={ removeTodoList }\r\n                    todoLists={ todoLists }\r\n                    changeTitle={ changeTitle }\r\n                    changeTodoListTitle={ changeTodoListTitle } />\r\n                </Paper>\r\n              </Grid>\r\n            );\r\n          } ) }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}