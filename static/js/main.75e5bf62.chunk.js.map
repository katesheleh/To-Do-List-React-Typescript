{"version":3,"sources":["AddItemForm.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","preparedTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","Todolist","removeTodoList","id","addTask","tasks","map","task","isDone","key","changeStatus","checked","type","removeTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","tasksObj","setTasks","todoListId","todoList","filteredTodoList","find","tl","console","log","newTodoList","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.75e5bf62.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\ntype AddItemFormPropsType = {\r\n  addItem: ( title: string ) => void;\r\n};\r\nexport function AddItemForm( props: AddItemFormPropsType ) {\r\n\r\n  let [ title, setTitle ] = useState( \"\" );\r\n  let [ error, setError ] = useState<string | null>( null );\r\n\r\n  const addItem = () => {\r\n    let preparedTitle = title.trim();\r\n\r\n    if ( preparedTitle ) {\r\n      props.addItem( preparedTitle );\r\n    }\r\n    else {\r\n      setError( 'Ttitle is required!' );\r\n    }\r\n    setTitle( \"\" );\r\n  };\r\n  const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    setError( null );\r\n    setTitle( e.currentTarget.value );\r\n  };\r\n  const onKeyPressHandler = ( e: KeyboardEvent<HTMLInputElement> ) => {\r\n    if ( e.charCode === 13 ) {\r\n      addItem();\r\n    }\r\n  };\r\n  return ( <div>\r\n    <input\r\n      value={ title }\r\n      onChange={ onChangeHandler }\r\n      onKeyPress={ onKeyPressHandler }\r\n      className={ error ? 'error' : '' } />\r\n\r\n    <button onClick={ addItem }>Add Task</button>\r\n\r\n    { error && <div className={ 'error-message' }>{ error }</div> }\r\n  </div> );\r\n}\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { FilterValuesType, todoListType } from './App';\r\nimport { AddItemForm } from \"./AddItemForm\";\r\n\r\n\r\nexport type TaskType = {\r\n  id: string;\r\n  title: string;\r\n  isDone: boolean;\r\n};\r\ntype PropsType = {\r\n  id: string;\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  filter: string;\r\n  removeTask: ( taskId: string, todoListId: string ) => void;\r\n  changeFilter: ( value: FilterValuesType, todoListId: string ) => void;\r\n  addTask: ( title: string, todoListId: string ) => void;\r\n  changeStatus: ( id: string, isDone: boolean, todoListId: string ) => void;\r\n  todoLists: Array<todoListType>;\r\n  removeTodoList: ( id: string ) => void;\r\n};\r\n\r\nconst Todolist = ( props: PropsType ) => {\r\n\r\n  const onAllClickHandler = () => { props.changeFilter( \"all\", props.id ); };\r\n  const onActiveClickHandler = () => { props.changeFilter( \"active\", props.id ); };\r\n  const onCompletedClickHandler = () => { props.changeFilter( \"completed\", props.id ); };\r\n\r\n  function removeTodoList() {\r\n    props.removeTodoList( props.id );\r\n  }\r\n\r\n  const addTask = ( title: string ) => {\r\n    props.addTask( title, props.id );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h3>{ props.title }\r\n        <button onClick={ removeTodoList }> X </button>\r\n      </h3>\r\n\r\n      <AddItemForm addItem={ addTask } />\r\n\r\n      <ul>\r\n        {\r\n          props.tasks.map( ( task ) => {\r\n\r\n            const onClickTandler = () => props.removeTask( task.id, props.id );\r\n            const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n              props.changeStatus( task.id, e.currentTarget.checked, props.id );\r\n            };\r\n\r\n            return <li\r\n              className={ task.isDone === true ? 'is-done' : '' }\r\n              key={ task.id }>\r\n\r\n              <input\r\n                onChange={ onChangeHandler }\r\n                type=\"checkbox\"\r\n                checked={ task.isDone } />\r\n\r\n              <span>{ task.title }</span>\r\n              <button onClick={ onClickTandler }>Delete Task</button>\r\n            </li>;\r\n          } )\r\n        }\r\n      </ul>\r\n      <div>\r\n        <button\r\n          className={ props.filter === 'all' ? 'active-filter' : '' }\r\n          onClick={ onAllClickHandler } >All</button>\r\n\r\n        <button\r\n          className={ props.filter === 'active' ? 'active-filter' : '' }\r\n          onClick={ onActiveClickHandler }>Active</button>\r\n\r\n        <button\r\n          className={ props.filter === 'completed' ? 'active-filter' : '' }\r\n          onClick={ onCompletedClickHandler }>Completed</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todolist;","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Todolist from \"./Todolist\";\r\nimport { v1 } from \"uuid\";\r\nimport { TaskType } from './Todolist';\r\nimport { AddItemForm } from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type todoListType = {\r\n  id: string;\r\n  title: string;\r\n  filter: FilterValuesType;\r\n};\r\n\r\ntype TasksStateType = {\r\n  [ key: string ]: Array<TaskType>;\r\n};\r\n\r\nfunction App() {\r\n  let todoListId1 = v1();\r\n  let todoListId2 = v1();\r\n\r\n  let [ todoLists, setTodoLists ] = useState<Array<todoListType>>( [\r\n    { id: todoListId1, title: 'What to learn', filter: 'all' },\r\n    { id: todoListId2, title: 'What to buy', filter: 'completed' }\r\n  ] );\r\n\r\n  let [ tasksObj, setTasks ] = useState<TasksStateType>( {\r\n    [ todoListId1 ]: [\r\n      { id: v1(), title: \"CSS\", isDone: true },\r\n      { id: v1(), title: \"JS\", isDone: true },\r\n      { id: v1(), title: \"ReactJS\", isDone: true },\r\n      { id: v1(), title: \"Rest API\", isDone: false },\r\n      { id: v1(), title: \"graphQL\", isDone: false }\r\n    ],\r\n    [ todoListId2 ]: [\r\n      { id: v1(), title: \"CSS2\", isDone: true },\r\n      { id: v1(), title: \"JS1\", isDone: true },\r\n      { id: v1(), title: \"ReactJS1\", isDone: false }\r\n    ],\r\n  } );\r\n\r\n  function removeTask( id: string, todoListId: string ) {\r\n    let todoList = tasksObj[ todoListId ];\r\n    tasksObj[ todoListId ] = todoList.filter( task => task.id !== id );\r\n    setTasks( { ...tasksObj } );\r\n  };\r\n\r\n  function removeTodoList( todoListId: string ) {\r\n    let filteredTodoList = todoLists;\r\n    filteredTodoList = todoLists.filter( todoList => todoList.id !== todoListId );\r\n    setTodoLists( filteredTodoList );\r\n    delete tasksObj[ todoListId ];\r\n    setTasks( { ...tasksObj } );\r\n  };\r\n\r\n  function addTask( title: string, todoListId: string ) {\r\n    let task = { id: v1(), title: title, isDone: false };\r\n    let todoList = tasksObj[ todoListId ];\r\n    tasksObj[ todoListId ] = [ task, ...todoList ];\r\n    setTasks( { ...tasksObj } );\r\n  }\r\n\r\n  function changeStatus( id: string, isDone: boolean, todoListId: string ) {\r\n    let todoList = tasksObj[ todoListId ];\r\n    let task = todoList.find( task => task.id === id );\r\n    if ( task ) {\r\n      task.isDone = isDone;\r\n      setTasks( { ...tasksObj } );\r\n    }\r\n  }\r\n\r\n  console.log( tasksObj );\r\n\r\n  function changeFilter( value: FilterValuesType, todoListId: string ) {\r\n    let task = todoLists.find( ( tl ) => tl.id === todoListId );\r\n    if ( task ) {\r\n      task.filter = value;\r\n    }\r\n    setTodoLists( [ ...todoLists ] );\r\n  }\r\n\r\n  function addTodoList( title: string ) {\r\n    let newTodoList: todoListType = { id: v1(), title: title, filter: 'all' };\r\n    setTodoLists( [ newTodoList, ...todoLists ] );\r\n    setTasks( {\r\n      ...tasksObj,\r\n      [ newTodoList.id ]: []\r\n    } );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm addItem={ addTodoList } />\r\n      { todoLists.map( tl => {\r\n        let tasksForToDoList = tasksObj[ tl.id ];\r\n\r\n        if ( tl.filter === \"active\" ) {\r\n          tasksForToDoList = tasksForToDoList.filter( task => task.isDone === false );\r\n        }\r\n        if ( tl.filter === \"completed\" ) {\r\n          tasksForToDoList = tasksForToDoList.filter( task => task.isDone === true );\r\n        }\r\n\r\n        return (\r\n          <Todolist\r\n            id={ tl.id }\r\n            key={ tl.id }\r\n            title={ tl.title }\r\n            tasks={ tasksForToDoList }\r\n            removeTask={ removeTask }\r\n            filter={ tl.filter }\r\n            changeFilter={ changeFilter }\r\n            addTask={ addTask }\r\n            changeStatus={ changeStatus }\r\n            removeTodoList={ removeTodoList }\r\n            todoLists={ todoLists } />\r\n        );\r\n      } ) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}