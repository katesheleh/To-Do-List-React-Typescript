{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditablesSpan.tsx","Todolist.tsx","state/todolist-reducer.tsx","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","preparedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodoListTitle","id","removeTodoList","Delete","addTask","tasks","map","task","className","isDone","key","Checkbox","changeStatus","checked","changeTitle","removeTask","Button","filter","changeFilter","initialState","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListId","action","type","taskId","todolistId","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","addTodolistAC","spacing","tl","tasksForToDoList","item","Paper","rootReducer","combineReducers","copyState","t","newTask","find","todoList","newTodoList","todolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7cd7654b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport { TextField, IconButton } from '@material-ui/core';\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: ( title: string ) => void;\r\n};\r\nexport function AddItemForm( props: AddItemFormPropsType ) {\r\n\r\n  let [ title, setTitle ] = useState( \"\" );\r\n  let [ error, setError ] = useState<string | null>( null );\r\n\r\n  const addItem = () => {\r\n    let preparedTitle = title.trim();\r\n\r\n    if ( preparedTitle ) {\r\n      props.addItem( preparedTitle );\r\n    }\r\n    else {\r\n      setError( 'Title is required!' );\r\n    }\r\n    setTitle( \"\" );\r\n  };\r\n  const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    setError( null );\r\n    setTitle( e.currentTarget.value );\r\n  };\r\n  const onKeyPressHandler = ( e: KeyboardEvent<HTMLInputElement> ) => {\r\n    if ( e.charCode === 13 ) {\r\n      addItem();\r\n    }\r\n  };\r\n  return ( <div>\r\n    <TextField\r\n      variant={ 'outlined' }\r\n      value={ title }\r\n      onChange={ onChangeHandler }\r\n      onKeyPress={ onKeyPressHandler }\r\n      error={ !!error }\r\n      label={ 'Title' }\r\n      helperText={ error }\r\n    />\r\n\r\n    <IconButton color={ 'primary' } onClick={ addItem }>\r\n      <AddBox />\r\n    </IconButton>\r\n\r\n  </div> );\r\n}\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\ntype EditableSpanType = {\r\n  value: string;\r\n  onChange: ( newValue: string ) => void;\r\n};\r\n\r\nconst EditableSpan = ( props: EditableSpanType ) => {\r\n  const [ editMode, setEditMode ] = useState<boolean>( false );\r\n  const [ title, setTitle ] = useState<string>( props.value );\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode( true );\r\n    // set to default value in case if we didn't save it\r\n    setTitle( props.value );\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode( false );\r\n    props.onChange( title );\r\n  };\r\n\r\n  const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n    // setError( null );\r\n    setTitle( e.currentTarget.value );\r\n  };\r\n\r\n  return (\r\n    editMode\r\n      ?\r\n      < TextField\r\n        variant={ 'outlined' }\r\n        value={ title }\r\n        autoFocus={ true }\r\n        onBlur={ deactivateEditMode }\r\n        onChange={ onChangeHandler }\r\n      />\r\n      : <span onDoubleClick={ activateEditMode }>{ props.value }</span>\r\n  );\r\n};\r\n\r\nexport default EditableSpan;","import React, { ChangeEvent } from \"react\";\r\nimport { FilterValuesType, TodolistType } from './App';\r\nimport { AddItemForm } from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditablesSpan\";\r\nimport { IconButton, Button, Checkbox } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\n\r\n\r\nexport type TaskType = {\r\n  id: string;\r\n  title: string;\r\n  isDone: boolean;\r\n};\r\ntype PropsType = {\r\n  id: string;\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  filter: string;\r\n  removeTask: ( taskId: string, todoListId: string ) => void;\r\n  changeFilter: ( value: FilterValuesType, todoListId: string ) => void;\r\n  addTask: ( title: string, todoListId: string ) => void;\r\n  changeStatus: ( id: string, isDone: boolean, todoListId: string ) => void;\r\n  todoLists: Array<TodolistType>;\r\n  removeTodoList: ( id: string ) => void;\r\n  changeTitle: ( taskId: string, title: string, todolistId: string ) => void;\r\n  changeTodoListTitle: ( id: string, title: string ) => void;\r\n};\r\n\r\nconst Todolist = ( props: PropsType ) => {\r\n\r\n  const onAllClickHandler = () => { props.changeFilter( \"all\", props.id ); };\r\n  const onActiveClickHandler = () => { props.changeFilter( \"active\", props.id ); };\r\n  const onCompletedClickHandler = () => { props.changeFilter( \"completed\", props.id ); };\r\n\r\n  function removeTodoList() {\r\n    props.removeTodoList( props.id );\r\n  }\r\n\r\n  const addTask = ( title: string ) => {\r\n    props.addTask( title, props.id );\r\n  };\r\n\r\n  const onChangeTodoListTitle = ( title: string ) => {\r\n    props.changeTodoListTitle( props.id, title );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h3>\r\n        <EditableSpan value={ props.title } onChange={ onChangeTodoListTitle } />\r\n        <IconButton onClick={ removeTodoList }>\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n\r\n      <AddItemForm addItem={ addTask } />\r\n\r\n      <div>\r\n        {\r\n          props.tasks.map( ( task ) => {\r\n\r\n            const onClickTandler = () => props.removeTask( task.id, props.id );\r\n            const onChangeHandler = ( e: ChangeEvent<HTMLInputElement> ) => {\r\n              props.changeStatus( task.id, e.currentTarget.checked, props.id );\r\n            };\r\n            const onChangeTaskTitle = ( title: string ) => {\r\n              props.changeTitle( task.id, title, props.id );\r\n            };\r\n\r\n            return <div\r\n              className={ task.isDone === true ? 'is-done' : '' }\r\n              key={ task.id }>\r\n\r\n              <Checkbox\r\n                onChange={ onChangeHandler }\r\n                color={ 'primary' }\r\n                checked={ task.isDone } />\r\n\r\n              <EditableSpan value={ task.title } onChange={ onChangeTaskTitle } />\r\n\r\n              {/* Remove task */ }\r\n              <IconButton onClick={ onClickTandler }>\r\n                <Delete />\r\n              </IconButton>\r\n            </div>;\r\n          } )\r\n        }\r\n      </div>\r\n      <div>\r\n        <Button\r\n          variant={ props.filter === 'all' ? 'outlined' : 'text' }\r\n          onClick={ onAllClickHandler }\r\n          color={ 'default' }>All</Button>\r\n\r\n        <Button\r\n          variant={ props.filter === 'active' ? 'outlined' : 'text' }\r\n          onClick={ onActiveClickHandler }\r\n          color={ 'primary' }>Active</Button>\r\n\r\n        <Button\r\n          variant={ props.filter === 'completed' ? 'outlined' : 'text' }\r\n          onClick={ onCompletedClickHandler }\r\n          color={ 'secondary' }>Completed</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todolist;","import {TodolistType, FilterValuesType} from '../App'\r\nimport {v1} from 'uuid'\r\n\r\nexport type RemoveTodolistActionType = {\r\n\ttype: 'REMOVE-TODOLIST'\r\n\tid: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n\ttype: 'ADD-TODOLIST'\r\n\ttitle: string\r\n\ttodolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n\ttype: 'CHANGE-TODOLIST-TITLE'\r\n\tid: string\r\n\ttitle: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n\ttype: 'CHANGE-TODOLIST-FILTER'\r\n\tfilter: FilterValuesType\r\n\tid: string\r\n}\r\n\r\nexport type ActionType = RemoveTodolistActionType | AddTodolistActionType\r\n\t\t| ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TODOLIST':\r\n\t\t\treturn state.filter(todoList => todoList.id !== action.id)\r\n\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\tlet newTodoList: TodolistType = {id: action.todolistId, title: action.title, filter: 'all'}\r\n\t\t\treturn [...state, newTodoList]\r\n\r\n\t\tcase 'CHANGE-TODOLIST-FILTER':\r\n\t\t\tconst todolist = state.find(tl => tl.id === action.id)\r\n\t\t\tif (todolist) {\r\n\t\t\t\ttodolist.filter = action.filter\r\n\t\t\t\treturn [...state]\r\n\t\t\t}\r\n\t\t\treturn state\r\n\r\n\t\tcase 'CHANGE-TODOLIST-TITLE':\r\n\t\t\tconst todoList = state.find(tl => tl.id === action.id)\r\n\t\t\tif (todoList) {\r\n\t\t\t\ttodoList.title = action.title\r\n\t\t\t\treturn [...state]\r\n\t\t\t}\r\n\t\t\treturn state\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n\treturn {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n\treturn {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\r\n\treturn {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: id}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n\treturn {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\n","import {TasksStateType} from '../App'\r\nimport {v1} from 'uuid'\r\nimport {RemoveTodolistActionType} from './todolist-reducer'\r\n\r\nexport type RemoveTaskActionType = {\r\n\ttype: 'REMOVE-TASK'\r\n\ttaskId: string\r\n\ttodolistId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n\ttype: 'ADD-TASK'\r\n\ttitle: string\r\n\ttodolistId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n\ttype: 'CHANGE-TASK-STATUS'\r\n\tisDone: boolean\r\n\ttodolistId: string\r\n\ttaskId: string\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n\ttype: 'CHANGE-TASK-TITLE'\r\n\ttodolistId: string\r\n\ttaskId: string\r\n\ttitle: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n\ttype: 'ADD-TODOLIST'\r\n\ttitle: string\r\n\ttodolistId: string\r\n}\r\n\r\n\r\nexport type ActionType = RemoveTaskActionType\r\n\t\t| AddTaskActionType | ChangeTaskStatusActionType\r\n\t\t| ChangeTaskTitleActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType) => {\r\n\tlet copyState\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TASK':\r\n\t\t\tcopyState = {...state}\r\n\t\t\tcopyState[action.todolistId] = copyState[action.todolistId].filter(t => t.id !== action.taskId)\r\n\t\t\treturn copyState\r\n\r\n\t\tcase 'ADD-TASK':\r\n\t\t\tcopyState = {...state}\r\n\t\t\tlet newTask = {id: v1(), title: action.title, isDone: false}\r\n\t\t\tcopyState[action.todolistId] = [newTask, ...copyState[action.todolistId]]\r\n\t\t\treturn copyState\r\n\r\n\t\tcase 'CHANGE-TASK-STATUS': {\r\n\t\t\t// copyState[action.todolistId] = copyState[action.todolistId].map(t => {\r\n\t\t\t// \tif(t.id !== action.taskId) {\treturn t \t} else {\treturn {...t, isDone: action.isDone}\t}\r\n\t\t\t// })\r\n\t\t\tcopyState = {...state}\r\n\t\t\tlet tasks = state[action.todolistId]\r\n\t\t\tlet task = tasks.find(task => task.id === action.taskId)\r\n\t\t\tif (task) {\r\n\t\t\t\ttask.isDone = action.isDone\r\n\t\t\t}\r\n\t\t\treturn copyState\r\n\t\t}\r\n\r\n\t\tcase 'CHANGE-TASK-TITLE': {\r\n\t\t\t// copyState[action.todolistId] = copyState[action.todolistId].map(t => {\r\n\t\t\t// \tif(t.id !== action.taskId) {return t\t} else {\treturn {...t, title: action.title}\t}\r\n\t\t\t// })\r\n\t\t\tcopyState = {...state}\r\n\t\t\tlet tasks = state[action.todolistId]\r\n\t\t\tlet task = tasks.find(task => task.id === action.taskId)\r\n\t\t\tif (task) {\r\n\t\t\t\ttask.title = action.title\r\n\t\t\t}\r\n\t\t\treturn copyState\r\n\t\t}\r\n\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\tcopyState = {...state}\r\n\t\t\tcopyState[action.todolistId] = []\r\n\t\t\treturn copyState\r\n\r\n\t\tcase 'REMOVE-TODOLIST':\r\n\t\t\tcopyState = {...state}\r\n\t\t\tdelete copyState[action.id]\r\n\t\t\treturn copyState\r\n\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n\treturn {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n\treturn {type: 'ADD-TASK', title: title, todolistId: todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n\treturn {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n\treturn {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport './App.css'\r\nimport Todolist from './Todolist'\r\nimport {AddItemForm} from './AddItemForm'\r\n\r\nimport {\r\n\tAppBar,\r\n\tToolbar,\r\n\tIconButton,\r\n\tTypography,\r\n\tButton,\r\n\tContainer,\r\n\tGrid,\r\n\tPaper\r\n} from '@material-ui/core'\r\n\r\nimport {Menu} from '@material-ui/icons'\r\nimport {addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from './state/todolist-reducer'\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer'\r\nimport {TasksStateType, TodolistType} from './App';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nfunction AppWithRedux() {\r\n\tlet todoLists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n\tlet tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\tlet dispatch = useDispatch()\r\n\r\n\tfunction removeTask(id: string, todoListId: string) {\r\n\t\tconst action = removeTaskAC(id, todoListId)\r\n\t\tdispatch(action)\r\n\t}\r\n\r\n\r\n\tfunction addTask(title: string, todoListId: string) {\r\n\t\tconst action = addTaskAC(title, todoListId)\r\n\t\tdispatch(action)\r\n\t}\r\n\r\n\tfunction changeStatus(id: string, isDone: boolean, todoListId: string) {\r\n\t\tconst action = changeTaskStatusAC(id, isDone, todoListId)\r\n\t\tdispatch(action)\r\n\t}\r\n\r\n\tfunction changeTitle(taskId: string, title: string, todolistId: string) {\r\n\t\tconst action = changeTaskTitleAC(taskId, title, todolistId)\r\n\t\tdispatch(action)\r\n\r\n\t}\r\n\r\n\tfunction removeTodoList(todoListId: string) {\r\n\t\tconst action = removeTodolistAC(todoListId)\r\n\t\tdispatch(action)\r\n\t};\r\n\r\n\tfunction changeTodoListTitle(id: string, title: string) {\r\n\t\tconst action = changeTodolistTitleAC(id, title);\r\n\t\tdispatch(action)\r\n\t}\r\n\r\n\tfunction changeFilter(value: FilterValuesType, todoListId: string) {\r\n\t\tconst action = changeTodolistFilterAC(value, todoListId)\r\n\t\tdispatch(action)\r\n\t}\r\n\r\n\tfunction addTodoList(title: string) {\r\n\t\tconst action = addTodolistAC(title)\r\n\t\tdispatch(action)\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t{/* Header */}\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t\t\t\t\t\t<Menu/>\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\tNews\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Button color=\"inherit\">Login</Button>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\t\t\t\t{/* end Header */}\r\n\t\t\t\t<Container fixed>\r\n\t\t\t\t\t<Grid container style={{padding: '20px'}}>\r\n\t\t\t\t\t\t<AddItemForm addItem={addTodoList}/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t\t{todoLists.map(tl => {\r\n\t\t\t\t\t\t\tlet tasksForToDoList = tasks[tl.id]\r\n\r\n\t\t\t\t\t\t\tif (tl.filter === 'active') {\r\n\t\t\t\t\t\t\t\ttasksForToDoList = tasksForToDoList.filter(task => task.isDone === false)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (tl.filter === 'completed') {\r\n\t\t\t\t\t\t\t\ttasksForToDoList = tasksForToDoList.filter(task => task.isDone === true)\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Grid key={tl.id} item>\r\n\t\t\t\t\t\t\t\t\t\t<Paper style={{padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Todolist\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={tl.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle={tl.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttasks={tasksForToDoList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfilter={tl.filter}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchangeFilter={changeFilter}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchangeStatus={changeStatus}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttodoLists={todoLists}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchangeTitle={changeTitle}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}/>\r\n\t\t\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AppWithRedux\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\ttasks: tasksReducer,\r\n\ttodolists: todolistsReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n\t\t<Provider store={store}>\r\n\t\t\t<AppWithRedux/>\r\n\t\t</Provider>,\r\n\t\tdocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}