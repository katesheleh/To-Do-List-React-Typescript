{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","preparedTitle","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","tasks","map","task","isDone","key","id","changeStatus","checked","type","removeTask","filter","changeFilter","App","v1","setTasks","console","log","setFilter","tasksForToDoList","filteredTasks","newTasks","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.88d8c3f0.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport { FilterValuesType } from \"./App\";\r\n\r\n\r\ntype TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: string\r\n  removeTask: (taskId: string) => void\r\n  changeFilter: (value: FilterValuesType) => void\r\n  addTask: (title: string) => void\r\n  changeStatus: (id: string, isDone: boolean) => void\r\n}\r\n\r\nconst Todolist = (props: PropsType) => {\r\n\r\n  let [title, setTitle] = useState(\"\");\r\n  let [error, setError] = useState<string | null>(null);\r\n\r\n  const addTask = () => {\r\n    let preparedTitle = title.trim();\r\n\r\n    if (preparedTitle) {\r\n      props.addTask(preparedTitle)\r\n    } else {\r\n      setError('Ttitle is required!');\r\n    }\r\n    setTitle(\"\");\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setError(null)\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.charCode === 13) {\r\n      addTask()\r\n    }\r\n  }\r\n\r\n  const onAllClickHandler = () => { props.changeFilter(\"all\") }\r\n  const onActiveClickHandler = () => { props.changeFilter(\"active\") }\r\n  const onCompletedClickHandler = () => { props.changeFilter(\"completed\") }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{props.title}</h3>\r\n      <div>\r\n        <input\r\n          value={title}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          className={error ? 'error' : ''} />\r\n\r\n        <button onClick={addTask}>Add Task</button>\r\n\r\n        {error && <div className={'error-message'}>{error}</div>}\r\n      </div>\r\n      <ul>\r\n        {\r\n          props.tasks.map((task) => {\r\n\r\n            const onClickTandler = () => props.removeTask(task.id)\r\n            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n              props.changeStatus(task.id, e.currentTarget.checked)\r\n            }\r\n\r\n            return <li\r\n              className={task.isDone === true ? 'is-done' : ''}\r\n              key={task.id}>\r\n\r\n              <input\r\n                onChange={onChangeHandler}\r\n                type=\"checkbox\"\r\n                checked={task.isDone} />\r\n\r\n              <span>{task.title}</span>\r\n              <button onClick={onClickTandler}>Delete Task</button>\r\n            </li>\r\n          })\r\n        }\r\n      </ul>\r\n      <div>\r\n        <button\r\n          className={props.filter === 'all' ? 'active-filter' : ''}\r\n          onClick={onAllClickHandler} >All</button>\r\n\r\n        <button\r\n          className={props.filter === 'active' ? 'active-filter' : ''}\r\n          onClick={onActiveClickHandler}>Active</button>\r\n\r\n        <button\r\n          className={props.filter === 'completed' ? 'active-filter' : ''}\r\n          onClick={onCompletedClickHandler}>Completed</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todolist;","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Todolist from \"./Todolist\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n  let [tasks, setTasks] = useState([\r\n    { id: v1(), title: \"CSS\", isDone: true },\r\n    { id: v1(), title: \"JS\", isDone: true },\r\n    { id: v1(), title: \"ReactJS\", isDone: true },\r\n    { id: v1(), title: \"Rest API\", isDone: false },\r\n    { id: v1(), title: \"graphQL\", isDone: false }\r\n  ]);\r\n\r\n  function removeTask(id: string) {\r\n    let filteredTasks = tasks.filter(task => task.id !== id)\r\n    setTasks(filteredTasks)\r\n  };\r\n\r\n  function addTask(title: string) {\r\n    let task = { id: v1(), title: title, isDone: false }\r\n    let newTasks = [task, ...tasks]\r\n    setTasks(newTasks)\r\n  }\r\n\r\n  function changeStatus(id: string, isDone: boolean) {\r\n    let task = tasks.find(task => task.id === id)\r\n    if(task) {\r\n      task.isDone = isDone\r\n      setTasks([...tasks]);\r\n    }\r\n  }\r\n\r\n  console.log(tasks)\r\n\r\n  let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n  let tasksForToDoList = tasks;\r\n\r\n  if (filter === \"active\") {\r\n    tasksForToDoList = tasks.filter(task => task.isDone === false)\r\n  }\r\n  if (filter === \"completed\") {\r\n    tasksForToDoList = tasks.filter(task => task.isDone === true)\r\n  }\r\n\r\n  function changeFilter(value: FilterValuesType) {\r\n    setFilter(value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Todolist\r\n        title=\"ReactJS\"\r\n        tasks={tasksForToDoList}\r\n        removeTask={removeTask}\r\n        filter={filter}\r\n        changeFilter={changeFilter}\r\n        addTask={addTask}\r\n        changeStatus={changeStatus} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}